// Generated by CoffeeScript 1.9.0
(function() {
  var extend, request, switches, util;

  util = require('util');

  request = require('request-json');

  extend = require('util')._extend;

  switches = (function() {
    function switches(sw, vnetbuilderurl, vnetprovisioner) {
      var _base;
      this.config = extend({}, sw);
      this.config.vnetbuilderurl = vnetbuilderurl;
      this.config.vnetprovisionerurl = vnetprovisioner;
      if ((_base = this.config).make == null) {
        _base.make = "bridge";
      }
      this.status = {};
      this.statistics = {};
      util.log(" switch config " + JSON.stringify(this.config));
      util.log(" switch config vnetbuilderurl " + JSON.stringify(this.config.vnetbuilderurl));
      util.log(" switch config vnetprovisionerurl " + JSON.stringify(this.config.vnetprovisionerurl));
    }

    switches.prototype.create = function(callback) {
      var client;
      client = request.newClient(this.config.vnetbuilderurl);
      return client.post('/switch', this.config, (function(_this) {
        return function(err, res, body) {
          if (err != null) {
            util.log("err" + JSON.stringify(err));
          }
          util.log("create switches result " + JSON.stringify(body));
          _this.uuid = body.id;
          _this.status.result = body.status;
          if ((body != null ? body.reason : void 0) != null) {
            _this.status.reason = body.reason;
          }
          return callback;
        };
      })(this));
    };

    switches.prototype.del = function(callback) {
      var client;
      client = request.newClient(this.config.vnetbuilderurl);
      return client.del("/switch/" + this.uuid, (function(_this) {
        return function(err, res, body) {
          if (err != null) {
            util.log("err" + JSON.stringify(err));
          }
          if (body != null) {
            util.log("delete switches result " + JSON.stringify(body));
          }
          if (!(body instanceof Error)) {
            if ((body != null ? body.status : void 0) != null) {
              _this.status.result = body.status;
            }
            return callback(_this.status);
          }
        };
      })(this));
    };

    switches.prototype.get = function() {
      return {
        "uuid": this.uuid,
        "config": this.config,
        "status": this.status,
        "statistics": this.statistics
      };
    };

    switches.prototype.stop = function() {
      var client;
      client = request.newClient(this.config.vnetbuilderurl);
      return client.put("/switch/" + this.uuid + "/stop", this.config, (function(_this) {
        return function(err, res, body) {
          if (err != null) {
            util.log("err" + JSON.stringify(err));
          }
          if (body != null) {
            util.log("start switche result " + JSON.stringify(body));
          }
          if (!(body instanceof Error)) {
            if ((body != null ? body.status : void 0) != null) {
              _this.status.result = body.status;
            }
            return callback(_this.status);
          }
        };
      })(this));
    };

    switches.prototype.start = function(callback) {
      var client;
      client = request.newClient(this.config.vnetbuilderurl);
      return client.put("/switch/" + this.uuid + "/start", this.config, (function(_this) {
        return function(err, res, body) {
          if (err != null) {
            util.log("err" + JSON.stringify(err));
          }
          if (body != null) {
            util.log("start switche result " + JSON.stringify(body));
          }
          if (!(body instanceof Error)) {
            if ((body != null ? body.status : void 0) != null) {
              _this.status.result = body.status;
            }
            return callback(_this.status);
          }
        };
      })(this));
    };

    switches.prototype.connect = function(ifname, callback) {
      var client, val;
      client = request.newClient(this.config.vnetbuilderurl);
      val = {
        "ifname": ifname
      };
      return client.put("/switch/" + this.uuid + "/connect", val, (function(_this) {
        return function(err, res, body) {
          if (err != null) {
            util.log("err" + JSON.stringify(err));
          }
          if (body != null) {
            util.log("start switche result " + JSON.stringify(body));
          }
          if (!(body instanceof Error)) {
            if ((body != null ? body.status : void 0) != null) {
              _this.status.result = body.status;
            }
            return callback(_this.status);
          }
        };
      })(this));
    };

    switches.prototype.switchStatus = function() {};

    switches.prototype.statistics = function() {};

    return switches;

  })();

  module.exports = switches;

}).call(this);
