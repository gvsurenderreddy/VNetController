// Generated by CoffeeScript 1.7.1
(function() {
  var Account, AccountData, AccountRegistry, StormData, StormRegistry, util,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  StormRegistry = require('stormregistry');

  StormData = require('stormdata');

  AccountRegistry = (function(_super) {
    __extends(AccountRegistry, _super);

    function AccountRegistry(filename) {
      this.on('load', function(key, val) {
        var entry;
        console.log("restoring " + key + " with:", val);
        entry = new AccountData(key, val);
        if (entry != null) {
          entry.saved = true;
          return this.add(entry);
        }
      });
      this.on('removed', function(entry) {
        if (entry.destructor != null) {
          return entry.destructor();
        }
      });
      AccountRegistry.__super__.constructor.call(this, filename);
    }

    AccountRegistry.prototype.add = function(data) {
      var entry;
      if (!(data instanceof AccountData)) {
        return;
      }
      return entry = AccountRegistry.__super__.add.call(this, data.id, data);
    };

    AccountRegistry.prototype.update = function(data) {
      return AccountRegistry.__super__.update.call(this, data.id, data);
    };

    AccountRegistry.prototype.get = function(key) {
      var entry;
      entry = AccountRegistry.__super__.get.call(this, key);
      if (entry == null) {
        return;
      }
      if ((entry.data != null) && entry.data instanceof AccountData) {
        entry.data.id = entry.id;
        return entry.data;
      } else {
        return entry;
      }
    };

    return AccountRegistry;

  })(StormRegistry);

  AccountData = (function(_super) {
    var AccountSchema;

    __extends(AccountData, _super);

    AccountSchema = {
      name: "Account",
      type: "object",
      additionalProperties: true,
      properties: {
        name: {
          type: "string",
          required: true
        },
        email: {
          type: "string",
          required: true
        },
        virtualization: {
          type: "string",
          required: true
        },
        ipassignment: {
          type: "string",
          required: true
        },
        wanip_pool: {
          type: "string",
          required: false
        },
        lanip_pool: {
          type: "string",
          required: false
        },
        loip_pool: {
          type: "string",
          required: false
        }
      }
    };

    function AccountData(id, data) {
      AccountData.__super__.constructor.call(this, id, data, AccountSchema);
    }

    return AccountData;

  })(StormData);

  util = require('util');

  Account = (function() {
    function Account(filename) {
      this.registry = new AccountRegistry(filename);
    }

    Account.prototype.create = function(data, callback) {
      var Accdata, err;
      this.data = data;
      try {
        return Accdata = new AccountData(this.data.name, this.data);
      } catch (_error) {
        err = _error;
        util.log("invalid schema" + err);
        return callback(new Error("Invalid Input "));
      } finally {
        util.log(JSON.stringify(Accdata));
        this.registry.add(Accdata);
        return callback(Accdata.data);
      }
    };

    Account.prototype.list = function(callback) {
      return callback(this.registry.list()({
        get: function(id, callback) {
          return callback(this.registry.get(id));
        }
      }));
    };

    return Account;

  })();

  module.exports = Account;

}).call(this);
