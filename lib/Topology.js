// Generated by CoffeeScript 1.7.1
(function() {
  var IPManager, NodeIf, StormData, StormRegistry, SwitchData, SwitchIf, Topology, TopologyData, TopologyRegistry, request, util,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  StormRegistry = require('stormregistry');

  StormData = require('stormdata');

  TopologyRegistry = (function(_super) {
    __extends(TopologyRegistry, _super);

    function TopologyRegistry(filename) {
      this.on('load', function(key, val) {
        var entry;
        console.log("restoring " + key + " with:", val);
        entry = new TopologyData(key, val);
        if (entry != null) {
          entry.saved = true;
          return this.add(entry);
        }
      });
      this.on('removed', function(entry) {
        if (entry.destructor != null) {
          return entry.destructor();
        }
      });
      TopologyRegistry.__super__.constructor.call(this, filename);
    }

    TopologyRegistry.prototype.add = function(data) {
      var entry;
      if (!(data instanceof TopologyData)) {
        return;
      }
      return entry = TopologyRegistry.__super__.add.call(this, data.id, data);
    };

    TopologyRegistry.prototype.update = function(data) {
      return TopologyRegistry.__super__.update.call(this, data.id, data);
    };

    TopologyRegistry.prototype.get = function(key) {
      var entry;
      entry = TopologyRegistry.__super__.get.call(this, key);
      if (entry == null) {
        return;
      }
      if ((entry.data != null) && entry.data instanceof TopologyData) {
        entry.data.id = entry.id;
        return entry.data;
      } else {
        return entry;
      }
    };

    return TopologyRegistry;

  })(StormRegistry);

  TopologyData = (function(_super) {
    var TopologySchema;

    __extends(TopologyData, _super);

    TopologySchema = {
      name: "Topology",
      type: "object",
      additionalProperties: true,
      properties: {
        projectid: {
          type: "string",
          required: true
        },
        name: {
          type: "string",
          required: true
        },
        switches: {
          type: "array",
          items: {
            name: "switch",
            type: "object",
            required: true,
            additionalProperties: true,
            properties: {
              name: {
                type: "string",
                required: true
              },
              ports: {
                type: "integer",
                required: true
              }
            }
          }
        },
        nodes: {
          type: "array",
          items: {
            name: "node",
            type: "object",
            required: true,
            additionalProperties: true,
            properties: {
              name: {
                type: "string",
                required: true
              },
              type: {
                type: "string",
                required: true
              },
              Services: {
                type: "array",
                required: true,
                additionalProperties: true,
                items: {
                  type: "object",
                  required: true,
                  properties: {
                    name: {
                      "type": "string",
                      "required": false
                    },
                    enabled: {
                      "type": "boolean",
                      "required": false
                    }
                  }
                }
              },
              no_of_wan_interfaces: {
                type: "integer",
                required: true
              },
              no_of_lan_interfaces: {
                type: "integer",
                required: true
              },
              no_of_lo_interfaces: {
                type: "integer",
                required: true
              },
              wan: {
                type: "array",
                required: true,
                additionalProperties: true,
                items: {
                  name: "wan",
                  type: "object",
                  required: true,
                  properties: {
                    index: {
                      type: "integer",
                      required: true
                    },
                    linktype: {
                      type: "string",
                      required: true
                    },
                    protocol: {
                      type: "string",
                      required: true
                    },
                    connect_to: {
                      type: "string",
                      required: true
                    }
                  }
                }
              },
              lan: {
                type: "array",
                required: true,
                additionalProperties: true,
                items: {
                  name: "lan",
                  type: "object",
                  required: true,
                  properties: {
                    index: {
                      type: "integer",
                      required: true
                    },
                    linktype: {
                      type: "string",
                      required: true
                    },
                    protocol: {
                      type: "string",
                      required: true
                    },
                    connect_to: {
                      type: "string",
                      required: true
                    }
                  }
                }
              }
            }
          }
        }
      }
    };

    function TopologyData(id, data) {
      TopologyData.__super__.constructor.call(this, id, data, TopologySchema);
    }

    return TopologyData;

  })(StormData);

  util = require('util');

  request = require('request-json');

  SwitchData = (function(_super) {
    __extends(SwitchData, _super);

    function SwitchData() {
      return SwitchData.__super__.constructor.apply(this, arguments);
    }

    return SwitchData;

  })(StormData);

  SwitchIf = (function(_super) {
    __extends(SwitchIf, _super);

    function SwitchIf() {
      return SwitchIf.__super__.constructor.apply(this, arguments);
    }

    return SwitchIf;

  })(StormRegistry);

  NodeIf = (function(_super) {
    __extends(NodeIf, _super);

    function NodeIf() {
      return NodeIf.__super__.constructor.apply(this, arguments);
    }

    return NodeIf;

  })(StormData);

  NodeIf = (function(_super) {
    __extends(NodeIf, _super);

    function NodeIf() {
      return NodeIf.__super__.constructor.apply(this, arguments);
    }

    return NodeIf;

  })(StormRegistry);

  IPManager = (function() {
    function IPManager() {}

    return IPManager;

  })();

  Topology = (function() {
    function Topology(filename) {
      this.registry = new TopologyRegistry(filename);
    }

    Topology.prototype.createSwitches = function(topo) {
      var client, ip, sw, _i, _len, _ref, _results;
      client = request.newClient('http://localhost:5680/');
      util.log("createSwitches " + JSON.stringify(topo.switches));
      _ref = topo.switches;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        sw = _ref[_i];
        util.log("sw :" + JSON.stringify(sw));
        ip = {};
        ip.type = "bridge";
        ip.projectid = "test122";
        _results.push(client.post('/createswitch', ip, (function(_this) {
          return function(err, res, body) {
            if (err != null) {
              util.log("err" + JSON.stringify(err));
            }
            util.log("res " + JSON.stringify(res));
            return util.log("body" + JSON.stringify(body));
          };
        })(this)));
      }
      return _results;
    };

    Topology.prototype.createVMs = function(topo) {
      var client, ip, node, _i, _len, _ref, _results;
      client = request.newClient('http://localhost:5680/');
      util.log("createSwitches " + JSON.stringify(topo.nodes));
      _ref = topo.nodes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        node = _ref[_i];
        util.log("node :" + JSON.stringify(node));
        ip = {};
        ip.type = "bridge";
        ip.projectid = "test122";
        _results.push(client.post('/createswitch', ip, (function(_this) {
          return function(err, res, body) {
            if (err != null) {
              util.log("err" + JSON.stringify(err));
            }
            util.log("res " + JSON.stringify(res));
            return util.log("body" + JSON.stringify(body));
          };
        })(this)));
      }
      return _results;
    };

    Topology.prototype.create = function(data, callback) {
      var err, topodata;
      this.data = data;
      try {
        return topodata = new TopologyData(null, this.data);
      } catch (_error) {
        err = _error;
        util.log("invalid schema" + err);
        return callback(new Error("Invalid Input "));
      } finally {
        util.log(JSON.stringify(topodata));
        this.registry.add(topodata);
        callback(topodata.data);
      }
    };

    return Topology;

  })();

  ({
    list: function(callback) {
      return callback(this.registry.list());
    }
  });

  module.exports = Topology;

}).call(this);
