// Generated by CoffeeScript 1.7.1
(function() {
  var HWADDR_PREFIX, HWADDR_START, StormData, StormRegistry, async, extend, getHwAddress, ip, node, request, util, vnetbuilderurl, vnetprovisionerurl;

  StormRegistry = require('stormregistry');

  StormData = require('stormdata');

  util = require('util');

  request = require('request-json');

  extend = require('util')._extend;

  ip = require('ip');

  async = require('async');

  vnetbuilderurl = 'http://localhost:5680/';

  vnetprovisionerurl = 'http://localhost:5671/';

  HWADDR_PREFIX = "00:16:3e:5a:55:";

  HWADDR_START = 10;

  getHwAddress = function() {
    var hwaddr;
    HWADDR_START++;
    hwaddr = "" + HWADDR_PREFIX + HWADDR_START;
    return hwaddr;
  };

  node = (function() {
    function node(topoid, data) {
      this.ifmap = [];
      this.ifindex = 1;
      this.config = extend({}, data);
      this.config.memory = "128m";
      this.config.vcpus = "2";
      this.config.projectid = topoid;
      this.config.ifmap = this.ifmap;
      this.statistics = {};
      this.status = {};
    }

    node.prototype.addLanInterface = function(brname, ipaddress, subnetmask, gateway) {
      var interf;
      interf = {
        "ifname": "eth" + (this.ifindex++),
        "hwAddress": getHwAddress(),
        "brname": brname,
        "ipaddress": ipaddress,
        "netmask": subnetmask,
        "gateway": gateway != null ? gateway : void 0,
        "type": "lan"
      };
      return this.ifmap.push(interf);
    };

    node.prototype.addWanInterface = function(brname, ipaddress, subnetmask, gateway) {
      var interf;
      interf = {
        "ifname": "eth" + (this.ifindex++),
        "hwAddress": getHwAddress(),
        "brname": brname,
        "ipaddress": ipaddress,
        "netmask": subnetmask,
        "gateway": gateway != null ? gateway : void 0,
        "type": "wan"
      };
      return this.ifmap.push(interf);
    };

    node.prototype.addMgmtInterface = function(ipaddress, subnetmask) {
      var interf;
      interf = {
        "ifname": "eth0",
        "hwAddress": getHwAddress(),
        "ipaddress": ipaddress,
        "netmask": subnetmask,
        "type": "mgmt"
      };
      return this.ifmap.push(interf);
    };

    node.prototype.create = function(callback) {
      var client;
      client = request.newClient(vnetbuilderurl);
      return client.post('/vm', this.config, (function(_this) {
        return function(err, res, body) {
          if (err != null) {
            util.log("err" + JSON.stringify(err));
          }
          util.log("node create result " + JSON.stringify(body));
          _this.uuid = body.id;
          _this.config.id = _this.uuid;
          _this.status.result = body.status;
          if (body.reason != null) {
            _this.status.reason = body.reason;
          }
          return callback(_this.status);
        };
      })(this));
    };

    node.prototype.start = function(callback) {
      var client;
      client = request.newClient(vnetbuilderurl);
      return client.put("/vm/" + this.uuid + "/start", this.config, (function(_this) {
        return function(err, res, body) {
          if (err != null) {
            util.log("err" + JSON.stringify(err));
          }
          util.log("node start result " + JSON.stringify(body));
          _this.status.result = body.status;
          if (body.reason != null) {
            _this.status.reason = body.reason;
          }
          return callback(_this.status);
        };
      })(this));
    };

    node.prototype.stop = function() {
      var client;
      client = request.newClient(vnetbuilderurl);
      return client.put("/vm/" + this.uuid + "/stop", this.config, (function(_this) {
        return function(err, res, body) {
          if (err != null) {
            util.log("err" + JSON.stringify(err));
          }
          util.log("node stop result " + JSON.stringify(body));
          _this.status.result = body.status;
          if (body.reason != null) {
            _this.status.reason = body.reason;
          }
          return callback(_this.status);
        };
      })(this));
    };

    node.prototype.del = function(callback) {
      var client;
      client = request.newClient(vnetbuilderurl);
      return client.del("/vm/" + this.uuid, (function(_this) {
        return function(err, res, body) {
          if (body != null) {
            util.log("node del body " + body);
          }
          util.log("node del result - res statuscode" + res.statusCode);
          return callback(body);
        };
      })(this));
    };

    node.prototype.getstatus = function(callback) {
      var client;
      util.log("inside get status funciton");
      client = request.newClient(vnetbuilderurl);
      return client.get("/vm/" + this.uuid, (function(_this) {
        return function(err, res, body) {
          if (err != null) {
            util.log("err" + JSON.stringify(err));
          }
          util.log("node status vm result " + JSON.stringify(body));
          return callback(body);
        };
      })(this));
    };

    node.prototype.getrunningstatus = function(callback) {
      var client;
      util.log("inside get status funciton");
      client = request.newClient(vnetbuilderurl);
      return client.get("/vm/" + this.uuid + "/status", (function(_this) {
        return function(err, res, body) {
          if (err != null) {
            util.log("err" + JSON.stringify(err));
          }
          util.log("node running status vm result " + JSON.stringify(body));
          return callback(body);
        };
      })(this));
    };

    node.prototype.stats = function(callback) {
      var client;
      util.log("inside stats funciton");
      client = request.newClient(vnetprovisionerurl);
      return client.get("/provision/" + this.uuid + "/stats", (function(_this) {
        return function(err, res, body) {
          if (err != null) {
            util.log("err" + JSON.stringify(err));
          }
          util.log("node stats collectoin result " + JSON.stringify(body));
          _this.statistics = body;
          return callback(body);
        };
      })(this));
    };

    node.prototype.provision = function(callback) {
      var client;
      util.log("inside provisioner funciton");
      client = request.newClient(vnetprovisionerurl);
      return client.post('/provision', this.config, (function(_this) {
        return function(err, res, body) {
          if (err != null) {
            util.log("err" + JSON.stringify(err));
          }
          util.log("node provision result " + JSON.stringify(body));
          return callback(body);
        };
      })(this));
    };

    node.prototype.get = function() {
      return {
        "id": this.uuid,
        "config": this.config,
        "status": this.status,
        "statistics": this.statistics
      };
    };

    return node;

  })();

  module.exports = node;

}).call(this);
