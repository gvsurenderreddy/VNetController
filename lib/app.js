// Generated by CoffeeScript 1.7.1
(function() {
  this.app = require('zappajs')(8888, function() {
    var topology;
    this.configure((function(_this) {
      return function() {
        _this.use('bodyParser', 'methodOverride', _this.app.router, 'static');
        return _this.set({
          'basepath': '/v1.0'
        });
      };
    })(this));
    this.configure({
      development: (function(_this) {
        return function() {
          return _this.use({
            errorHandler: {
              dumpExceptions: true,
              showStack: true
            }
          });
        };
      })(this),
      production: (function(_this) {
        return function() {
          return _this.use('errorHandler');
        };
      })(this)
    });
    this.enable('serve jquery', 'minify');
    topology = require('./Topology');
    this.post({
      '/Topology': function() {
        console.log("POST Topology received" + JSON.stringify(this.body));
        return topology.create(this.body, (function(_this) {
          return function(res) {
            console.log(res);
            return _this.send(res);
          };
        })(this));
      }
    });
    this.get({
      '/Topology': function() {
        console.log("GET Topology  received" + JSON.stringify(this.body));
        return topology.list((function(_this) {
          return function(res) {
            console.log(res);
            return _this.send(res);
          };
        })(this));
      }
    });
    this.get({
      '/Topology/:id/status': function() {
        console.log("GET Topology/id  received");
        return topology.get(this.params.id, (function(_this) {
          return function(res) {
            console.log(res);
            return _this.send(res);
          };
        })(this));
      }
    });
    this["delete"]({
      '/Topology/:id': function() {
        console.log("POST Topology destroy received");
        return topology.del(this.params.id, (function(_this) {
          return function(res) {
            console.log(res);
            return _this.send(res);
          };
        })(this));
      }
    });
    this.get({
      '/Topology/:id/device/:did': function() {
        console.log("GET Topology " + this.params.id + "  device id" + this.params.did + "  received");
        return topology.deviceStatus(this.params.id, this.params.did, (function(_this) {
          return function(res) {
            console.log(res);
            return _this.send(res);
          };
        })(this));
      }
    });
    this.get({
      '/Topology/:id/device/:did/stats': function() {
        console.log("GET Topology " + this.params.id + "  device id" + this.params.did + "  received");
        return topology.deviceStats(this.params.id, this.params.did, (function(_this) {
          return function(res) {
            console.log(res);
            return _this.send(res);
          };
        })(this));
      }
    });
    this.put({
      '/Topology/:id/device/:did/start': function() {
        console.log("GET Topology " + this.params.id + "  device id" + this.params.did + "  received");
        return topology.deviceStart(this.params.id, this.params.did, (function(_this) {
          return function(res) {
            console.log(res);
            return _this.send(res);
          };
        })(this));
      }
    });
    this.put({
      '/Topology/:id/device/:did/stop': function() {
        console.log("GET Topology " + this.params.id + "  device id" + this.params.did + "  received");
        return topology.deviceStop(this.params.id, this.params.did, (function(_this) {
          return function(res) {
            console.log(res);
            return _this.send(res);
          };
        })(this));
      }
    });
    return this["delete"]({
      '/Topology/:id/device/:did': function() {
        console.log("DEL Topology/id  received");
        return topology.deviceDelete(this.params.id, this.params.did, (function(_this) {
          return function(res) {
            console.log(res);
            return _this.send(res);
          };
        })(this));
      }
    });
  }).app;

}).call(this);
