// Generated by CoffeeScript 1.7.1
(function() {
  this.app = require('zappajs')(8888, function() {
    var account, accountclass, topology, topologyclass;
    this.configure((function(_this) {
      return function() {
        _this.use('bodyParser', 'methodOverride', _this.app.router, 'static');
        return _this.set({
          'basepath': '/v1.0'
        });
      };
    })(this));
    this.configure({
      development: (function(_this) {
        return function() {
          return _this.use({
            errorHandler: {
              dumpExceptions: true,
              showStack: true
            }
          });
        };
      })(this),
      production: (function(_this) {
        return function() {
          return _this.use('errorHandler');
        };
      })(this)
    });
    this.enable('serve jquery', 'minify');
    accountclass = require('./project');
    account = new accountclass('/tmp/accounts.db');
    topologyclass = require('./Topology');
    topology = new topologyclass('/tmp/topology.db');
    this.post({
      '/Project': function() {
        console.log("POST Project received" + JSON.stringify(this.body));
        return account.create(this.body, (function(_this) {
          return function(res) {
            console.log(res);
            return _this.send(res);
          };
        })(this));
      }
    });
    this.get({
      '/Project': function() {
        console.log("GET Project received" + JSON.stringify(this.body));
        return account.list((function(_this) {
          return function(res) {
            console.log(res);
            return _this.send(res);
          };
        })(this));
      }
    });
    this.post({
      '/Topology': function() {
        console.log("POST Topology received" + JSON.stringify(this.body));
        return topology.create(this.body, (function(_this) {
          return function(res) {
            console.log(res);
            return _this.send(res);
          };
        })(this));
      }
    });
    return this.get({
      '/Topology': function() {
        console.log("GET Topology  received" + JSON.stringify(this.body));
        return topology.list((function(_this) {
          return function(res) {
            console.log(res);
            return _this.send(res);
          };
        })(this));
      }
    });
  }).app;


  /*
      @put '/node': ->
          switchctrl.listSwitches (res) =>
              console.log res
              @send res  
  
      @delete '/node': ->   
          console.log "createVM received" + JSON.stringify @body        
          vmctrl.createVM @body, (res) =>
              console.log res
              @send res
  
      @post '/startVM': ->   
          console.log "startVM received" + JSON.stringify @body        
          vmctrl.startVM @body, (res) =>
              console.log res
              @send res    
  
      @post '/stopVM': ->   
          console.log "stopVM received" + JSON.stringify @body        
          vmctrl.stopVM @body, (res) =>
              console.log res
              @send res    
  
      @get '/listVMs': ->   
          console.log "listVMs received" + JSON.stringify @body        
          vmctrl.listVMs @body, (res) =>
              console.log res
              @send res    
  
      @post '/deleteVMs': ->   
          console.log "deleteVMs received" + JSON.stringify @body        
          vmctrl.deleteVMs @body, (res) =>
              console.log res
              @send res    
  
      @post '/deleteVM': ->   
          console.log "deleteVM received" + JSON.stringify @body        
          vmctrl.deleteVM @body, (res) =>
              console.log res
              @send res
   */

}).call(this);
